Metadata-Version: 2.1
Name: tzone.client
Version: 0.2.8
Summary: client of tzone
Home-page: https://github.com/zhihu/tzone
Author: Zhihu
Author-email: dev@zhihu.com
License: BSD
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Requires-Dist: thrift (<0.10.0,>=0.9.3)
Requires-Dist: tracing (>=1.13.7)
Requires-Dist: diplomat (>=1.0.3)
Requires-Dist: thrift-json

TZone QuickStart
=================

version number: 0.0.1
author: Zhihu

Overview
--------

An RPC framework for thrift

[![Documentation Status](http://zhdocs.io/projects/tzone/badge/?version=latest)](http://tzone.zhdocs.io/en/latest/?badge=latest)

Example
-------

1. 编写接口描述文件, 置于 `thrift_files` 目录下

    ```
    // calc.thrift
    namespace py calc_thrift

    const string __VERSION__ = "0.0.1a0";

    exception InvalidInput {
        1: i32 code,
        2: string message
    }

    service CalcService {
        i32 divide(1: i32 a, 2: i32 b) throws (1: InvalidInput err1),
    }
    ```

2. 代码生成

    安装命令行工具 pip install tzone.cli

    ``tzonecli generate thrift_files/calc.thrift``

    当前目录下会得到一个 ``gen-py`` 目录，从 thrift 文件生成的包放在这里。

    注意，目前我们使用的 thrift 版本为 0.9.3, 如果你使用 Mac，可以从我们的
    [homebrew-tools](https://git.in.zhihu.com/infrastructure/homebrew-tools) 安装老版本。

    ```
    brew tap zhihu/tools git@git.in.zhihu.com:infrastructure/homebrew-tools.git
    brew install zhihu-thrift
    ```


3. 发布 sdk

    ``$ tzonecli publish gen-py``

    如果配置了多个 pypi 的 remote, 可以用 `-r` 或 `--remote`  参数手动指定

    ``$ tzonecli publish gen-py -r mirror``

4. 编写 Server

    安装服务端 pip install tzone.server

     ```
     // api.py

     class Calc(object):

         def divide(self, a, b):
             if b == 0:
                 raise InvalidInput(code=400, message="divide by an invalid number")
             return a/b

     // main.py
     import api

     from tzone.server import TZone
     from calc_thrift import CalcService


     config = {
         # 接入 sentry
         'sentry': {'dsn': sentry_dsn},
     }

     service_map = [(CalcService, api.Calc)]
     app = TZone(service_map, config=config)

     if __name__ == '__main__':
         app.run(host='0.0.0.0', port=8000)
     ```

     server 端 app 兼容 WSGI, 因此可以直接使用 gunicorn/uwsgi 来运行. 也支持相应的 wsgi 中间件.比如

     ```
     from werkzeug.contrib.profiler import ProfilerMiddleware
     app = ProfilerMiddleware(app)
     ```

     注意, wsgi middlware 封装后的 app 不具有 TZone 实例的各方法(比如 `run`)和属性.

     注意: 服务端变更频繁时，建议不依赖发布的 sdk，直接使用 gen-py 下的包 。
         但注意避免把 gen-py 放进 git 仓库，每次构建时重新生成。

     buildout 下加入依赖方式:

     把 gen-py 这个目录添加到 sys.path, 并且每次构建重新生成

     ```
     [main]
     recipe = zc.recipe.egg
     interpreter = python
     eggs = calc
     extra-paths = ${buildout:directory}/gen-py

     [gen-thrift]
     recipe = plone.recipe.command
     command = ./bin/tzonecli generate thrift_files/calc.thrift
     update-command = ${:command}
     ```

     注意: 生产环境中我们要求 server 必须被gevent patch 过，以其到达更好的并发。被gevent patch 有
     两种方式:

     - 放在 gunicorn 后面:

     ``./bin/gunicorn -k gevent calc.main:app``

     - 在 **main.py** 的开始，加入这两行 (确保在导入其他所有代码之前):

     ```
     from gevent import monkey
     monkey.patch_all()
     ```

5. 编写 Client

    安装客户端 pip install tzone.client

    ```
    // client.py
    from tzone.client import Client

    from calc_thrift import CalcService

    client = Client("localhost", 8000, services=[CalcService])
    print client.CalcService.divide(a=40, b=20)
    ```
    更复杂例子可参考 `examples/guestbook`


6. 客户端超时

   客户端超时默认设置为 0.2s，也可以手动指定

   ```
   client = Client("localhost", 8000, services=[CalcService], timeout=0.5)
   ```

   如果想对特定接口单独设置超时, 可以在接口这里传入参数 `_timeout`
   这个私有参数表示这是 client 的参数，而不是接口的参数

   ```
   client.CalcService.divide(a=40, b=20, _timeout=5)
   ```


Library
--------
TZone 目前相关库有:

* tzone.server  TZone 服务端框架
* tzone.client  TZone 客户端库
* tzone.cli     TZone 命令行工具


