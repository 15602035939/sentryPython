#!/usr/bin/env python
# -*- coding: utf-8 -*-
import json
import os
import unittest

import mock

class TestLocalConfig(unittest.TestCase):

    @mock.patch('cfbclient.os.path.exists')
    @mock.patch('cfbclient.open')
    def test_local_config_success(self, mock_open, exists):
        from io import BytesIO
        from cfbclient import LocalConfigFinder
        exists.return_value = True
        local_config = {
            'pico': {
                'domains': "x"
            }
        }
        mock_open.return_value = BytesIO(json.dumps(local_config))
        config = LocalConfigFinder('config.json')
        assert config.pico['domains'] == 'x'

    def test_local_config_failed(self):
        from cfbclient import LocalConfigFinder
        config = LocalConfigFinder("not_exists_file.json")
        with self.assertRaises(RuntimeError):
            config['pico']

    def test_initialize_config_finder(self):
        from cfbclient import initialize_config_finder
        from cfbclient import ServerConfigFinder, LocalConfigFinder

        finder = initialize_config_finder()
        assert isinstance(finder, ServerConfigFinder)

        os.environ['CFB_LOCAL'] = 'test.json'
        finder = initialize_config_finder()
        assert isinstance(finder, LocalConfigFinder)