#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
test_cfbclient
----------------------------------

Tests for `cfbclient` module.
"""

import os
import re
import unittest


import requests
import responses

from requests.exceptions import ConnectionError, ReadTimeout


CFB_ADDRESS = 'localhost:8000'


class TestCfbClient(unittest.TestCase):

    def setUp(self):
        os.environ['CFBSERVICE_SERVICE_ADDRESS'] = CFB_ADDRESS
        from cfbclient import config
        self.config = config

    def tearDown(self):
        os.unsetenv('CFBSERVICE_SERVICE_ADDRESS')

    @responses.activate
    def test_v1_config(self):
        os.environ['CFB_VERSION'] = 'V1'
        responses.add(responses.POST, 'http://{0}'.format(CFB_ADDRESS),
                      json={'domains': ['pic1.zhimg.com', 'pic2.zhimg.com']})
        assert 'pic1.zhimg.com' in self.config.pico['domains']
        os.environ['CFB_VERSION'] = ''

    @responses.activate
    def test_v2_config(self):
        responses.add(responses.GET, "http://{0}/v2/configs/pico/default".format(CFB_ADDRESS),
                      json={'domains': ['pic1.zhimg.com', 'pic2.zhimg.com']})
        assert 'pic1.zhimg.com' in self.config.pico['domains']

    @responses.activate
    def test_v2_namespace_config(self):
        responses.add(responses.GET, "http://{0}/v2/configs/pico/domain".format(CFB_ADDRESS),
                      json={'domains': ['pic1.zhimg.com', 'pic2.zhimg.com']})
        assert 'pic1.zhimg.com' in self.config['pico/domain']['domains']
        from cfbclient import connect
        pico_config = connect('pico/domain')
        assert 'pic1.zhimg.com' in pico_config['domains']

    @responses.activate
    def test_dot_config(self):
        responses.add(responses.GET, "http://{0}/v2/configs/pico/domain".format(CFB_ADDRESS),
                      json={'domains': ['pic1.zhimg.com', 'pic2.zhimg.com']})
        assert 'pic1.zhimg.com' in self.config.pico.domains

    @responses.activate
    def test_callable_config(self):
        responses.add(responses.GET, "http://{0}/v2/configs/pico/default".format(CFB_ADDRESS),
                      json={'domains': ['pic1.zhimg.com', 'pic2.zhimg.com']})
        assert 'pic1.zhimg.com' in self.config('pico')['domains']

    @responses.activate
    def test_lazy_config(self):
        responses.add(responses.GET, "http://{0}/v2/configs/pico/default".format(CFB_ADDRESS),
                      json={'domains': ['pic1.zhimg.com', 'pic2.zhimg.com']})
        from cfbclient import connect
        pico_config = connect('pico')
        assert 'pic1.zhimg.com' in pico_config['domains']
        assert 'pic1.zhimg.com' in pico_config.domains
        assert 'pic1.zhimg.com' in pico_config.get('domains')

    @responses.activate
    def test_config_on_failure(self):
        url_re = re.compile(r'http://.*')
        responses.add(responses.POST, url_re, body='{}', status=500, content_type='application/json')
        resp = requests.post('http://www.zhihu.com')
        assert resp.status_code == 500
        assert 'pic1.zhimg.com' in self.config.pico['domains']

    @responses.activate
    def test_config_on_exception(self):
        url_re = re.compile(r'http://.*')
        exceptions = [ConnectionError("Connect error"), ReadTimeout("timeout error")]
        for exception in exceptions:
            responses.add(responses.GET, url_re, body=exception)
            assert 'pic1.zhimg.com' in self.config.pico['domains']

    def test_consul_connect_failed(self):
        from cfbclient import ServerConfigFinder
        config = ServerConfigFinder()
        assert 'pic1.zhimg.com' in config.pico['domains']
        os.environ['SERVICE_DISCOVERY_URI'] = 'consul://noexist.localhost:830'
        config = ServerConfigFinder()
        assert 'pic1.zhimg.com' in config.pico['domains']
