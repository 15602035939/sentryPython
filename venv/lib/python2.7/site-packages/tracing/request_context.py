#!/usr/bin/env python
# coding: utf-8

import logging
import sys
import weakref

from six.moves import _thread as thread

_logger = logging.getLogger(__name__)


class RequestContextManager(object):
    """A context manager that saves span in thread and greenlet local state globally.

    """
    _state = weakref.WeakValueDictionary()

    def __init__(self, span):
        self._span = span

    @classmethod
    def current_span(cls):
        return cls._state.get(_current_thread_id())

    def __enter__(self):
        self._prev_span = self.__class__.current_span()
        self.__class__._state[_current_thread_id()] = self._span

    def __exit__(self, exc_type=None, exc_val=None, exc_tb=None):
        current = self.__class__.current_span()
        if current != self._span:
            # log and ignore
            _logger.exception(
                "Inconsistent trace_id, current:{!r}, expected:{!r}. "
                "Please report this to the tracing team.".format(
                    current, self._span))
        if self._prev_span is None:
            del self.__class__._state[_current_thread_id()]
        else:
            self.__class__._state[_current_thread_id()] = self._prev_span
        self._prev_span = None

    @classmethod
    def clear(cls):
        current_id = _current_thread_id()
        if current_id in cls._state:
            del cls._state[_current_thread_id()]

    @classmethod
    def id(cls):
        """Current span trace_id, debug only."""
        span = cls.current_span()
        if span:
            return span.trace_id
        return None


def get_current_span():
    return RequestContextManager.current_span()


def _current_thread_id():
    """Returns the thread ID for the caller.

    When greenlets are present and we detect we are running in the
    greenlet then we use the greenlet ID instead of the thread ID.

    """

    greenlet = sys.modules.get('greenlet')

    if greenlet:
        # Greenlet objects are maintained in a tree structure with
        # the 'parent' attribute pointing to that which a specific
        # instance is associated with. Only the root node has no
        # parent. This node is special and is the one which
        # corresponds to the original thread where the greenlet
        # module was imported and initialised. That root greenlet is
        # never actually running and we should always ignore it. In
        # all other cases where we can obtain a current greenlet,
        # then it should indicate we are running as a greenlet.

        current = greenlet.getcurrent()
        if current is not None and current.parent:
            return id(current)

    return thread.get_ident()

