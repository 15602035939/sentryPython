#!/usr/bin/env python
# coding: utf-8

import atexit
import logging
import threading
import time


class Reporter(object):
    _initialize_lock = threading.Lock()
    _initialized = None
    _instance = None

    @staticmethod
    def instance():
        return Reporter._instance

    @staticmethod
    def initialize(tracer, harvest_interval):
        """
        :param tracer:
        :param harvest_interval: interval in seconds.
        """
        if Reporter._initialized:
            return
        with Reporter._initialize_lock:
            if not Reporter._initialized:
                Reporter._initialized = True
                r = Reporter(tracer, harvest_interval)
                r.start()
                Reporter._instance = r

    def __init__(self, tracer, harvest_interval):
        self._tracer = tracer
        self.harvest_interval = harvest_interval
        self._process_shutdown = False
        self._harvest_thread = threading.Thread(target=self._harvest_loop,
                                                name='Tracing-Harvest-Thread')
        self._harvest_thread.setDaemon(True)
        self._wake_up = threading.Event()

        atexit.register(self._atexit_shutdown)

    def start(self):
        self._harvest_thread.start()

    def wake_up(self, shutdown=False):
        self._process_shutdown = shutdown
        self._wake_up.set()

    def _atexit_shutdown(self):
        self._process_shutdown = True
        self._wake_up.set()
        self._harvest_thread.join(5)

    def _harvest_loop(self):
        next_harvest = time.time()

        try:
            while True:
                if self._process_shutdown:
                    return
                now = time.time()
                while next_harvest <= now:
                    next_harvest += self.harvest_interval

                delay = next_harvest - now
                self._wake_up.wait(delay)
                self._run_harvest()
                if self._wake_up.is_set():
                    self._wake_up.clear()

        except:
            if self._process_shutdown:
                logging.exception(
                    "Unexpected exception in main harvest loop while process "
                    "is shutting down. This can occur in rare cases due to the "
                    "main thread cleaning up and destroying objects while the "
                    "background harvest thread is still running. If the "
                    "message occurs on a regular basis, then please report to "
                    "tracing team for further investigation.")
            else:
                logging.exception(
                    "Unexpected exception in main harvest loop. Please report "
                    "this problem to tracing team.")

    def _run_harvest(self):
        self._tracer.flush()
