#!/usr/bin/env python
# coding: utf-8

import sys
import imp

try:
    from importlib import find_loader
except ImportError:
    find_loader = None

_import_hooks = {}


def register_import_hook(name, callable):
    imp.acquire_lock()

    try:
        hooks = _import_hooks.get(name)

        if hooks is None:
            module = sys.modules.get(name)
            if module is not None:
                callable(module)
            else:
                _import_hooks[name] = [callable]
        else:
            _import_hooks[name].append(callable)

    finally:
        imp.release_lock()


def _notify_import_hooks(name, module):

    # Is assumed that this function is called with the global
    # import lock held. This should be the case as should only
    # be called from load_module() of the import hook loader.
    hooks = _import_hooks.get(name)
    if hooks is not None:
        _import_hooks[name] = None
        for callable in hooks:
            callable(module)


class _ImportHookLoader(object):
    def load_module(self, fullname):
        # Call the import hooks on the module being handled.
        module = sys.modules[fullname]
        _notify_import_hooks(fullname, module)
        return module


class _ImportHookChainedLoader(object):
    def __init__(self, loader):
        self.loader = loader

    def load_module(self, fullname):
        module = self.loader.load_module(fullname)
        _notify_import_hooks(fullname, module)
        return module


class ImportHookFinder(object):
    def __init__(self):
        self._skip = {}

    def find_module(self, fullname, path=None):
        if fullname not in _import_hooks:
            return None
        if fullname in self._skip:
            return None
        self._skip[fullname] = True
        try:

            if find_loader:
                loader = find_loader(fullname, path)
                if loader:
                    return _ImportHookChainedLoader(loader)
            else:
                __import__(fullname)
                return _ImportHookLoader()
        finally:
            del self._skip[fullname]


def import_module(name):
    __import__(name)
    return sys.modules[name]
