#!/usr/bin/env python
# coding: utf-8

from __future__ import unicode_literals

import logging
import sys
import threading
import traceback

import opentracing

from tracing import import_hook
from tracing.contrib.zhihu import ZhihuInitializer
from tracing.initializer import Initializer
from tracing.reporter import Reporter

sys.meta_path.insert(0, import_hook.ImportHookFinder())

_logger = logging.getLogger(__name__)


class InstrumentationError(Exception):
    pass


def _raise_instrumentation_error(type, locals):
    logging.error('INSTRUMENTATION ERROR')
    logging.error('Type = %s' % type)
    logging.error('Locals = %s' % locals)
    logging.exception('Exception Details')

    raise InstrumentationError('Failure when instrumenting code')


_module_import_hook_results = {}
_module_import_hook_registry = {}


def _module_import_hook(target, module, function):
    def _instrument(target):
        logging.debug("instrument module %s" % ((target, module, function),))
        try:
            instrumented = target._nr_instrumented
        except AttributeError:
            instrumented = target._nr_instrumented = set()

        if (module, function) in instrumented:
            logging.debug("instrumentation already run %s" % ((target, module, function), ))
            return
        instrumented.add((module, function))

        try:
            getattr(import_hook.import_module(module), function)(target)
            _module_import_hook_results[(target.__name__, module, function)] = ''

        except Exception:
            _module_import_hook_results[(target.__name__, module,
                                         function)] = traceback.format_exception(*sys.exc_info())

            _raise_instrumentation_error('import-hook', locals())
    return _instrument


def _process_module_definition(target, mod, func):
    if target in _module_import_hook_registry:
        return
    try:
        _module_import_hook_registry[target] = (mod, func)
        logging.debug("register module %s" % ((target, mod, func),))
        import_hook.register_import_hook(target, _module_import_hook(target, mod, func))
        _module_import_hook_results.setdefault((target, mod, func), None)
    except:
        _raise_instrumentation_error('import-hook', locals())


def _setup_instrumentation():
    _process_module_definition('redis.client',
                               'tracing.hooks.nosql_redis',
                               'instrument_redis_client')
    _process_module_definition('redis.connection',
                               'tracing.hooks.nosql_redis',
                               'instrument_redis_connection')
    _process_module_definition('tornado.web',
                               'tracing.hooks.framework_tornado',
                               'instrument_tornado_web')
    _process_module_definition('pymysql',
                               'tracing.hooks.database_dbapi2',
                               'instrument_dbapi2')
    _process_module_definition('MySQLdb',
                               'tracing.hooks.database_dbapi2',
                               'instrument_dbapi2')
    _process_module_definition('requests.sessions',
                               'tracing.hooks.requests',
                               'instrument_requests_sessions')
    _process_module_definition('pymongo.collection',
                               'tracing.hooks.database_pymongo',
                               'instrument_pymongo_collection')
    _process_module_definition('happybase.connection',
                               'tracing.hooks.nosql_hbase',
                               'instrument_hbase_connection')
    _process_module_definition('gevent.greenlet',
                               'tracing.hooks.gevent',
                               'instrument_gevent_greenlet')

    # zhihu specific instrument
    _process_module_definition('zone.client',
                               'tracing.hooks.rpc_zone',
                               'instrument_zone_client')


_initialized = False
_initialization_lock = threading.RLock()


# Real initialization method
def _initialize(initializer_cls=Initializer, setup_instrumentation=True,
                **kwargs):
    global _initialized
    if _initialized:
        return

    with _initialization_lock:
        if _initialized:
            return

        _initialized = True
        try:
            initializer = initializer_cls(**kwargs)
            tracer = initializer.tracer
        except:
            _logger.warning("Initialize tracing using {}({}) failed".format(
                initializer_cls, kwargs), exc_info=True)
            _logger.warning("Falling back to stub initializer")
            initializer = Initializer()
            tracer = initializer.tracer

        Reporter.initialize(tracer, 10)

        opentracing.tracer = tracer

        if setup_instrumentation:
            _setup_instrumentation()


# Compatible initialization method
def initialize(unit_name=None, sample_rate=0.01, record_trace=True,
               setup_instrumentation=True):
    _initialize(ZhihuInitializer,
                unit_name=unit_name,
                sample_rate=sample_rate,
                record_trace=record_trace,
                setup_instrumentation=setup_instrumentation)

