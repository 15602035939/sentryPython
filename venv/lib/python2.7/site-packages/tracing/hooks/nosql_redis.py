#!/usr/bin/env python
# coding: utf-8

import opentracing
import six
from opentracing.ext import tags as otags
from wrapt.wrappers import wrap_function_wrapper

from tracing import tags as ttags
from tracing.request_context import get_current_span


def encode(value):
    """Return a byte string representation of the value

    Stolen from redis-py Connection.encode.
    """
    if isinstance(value, bytes):
        return value
    elif isinstance(value, float):
        value = repr(value)
    elif isinstance(value, (int, long)):
        value = str(value)
    elif not isinstance(value, six.string_types):
        value = str(value)
    if isinstance(value, unicode):
        value = value.encode('utf-8', 'replace')
    return value


def _wrapper_execute_command(wrapped, instance, args, kwargs):
    cmd = args[0].lower().replace(" ", "_")
    tags = {
        otags.SPAN_KIND: otags.SPAN_KIND_RPC_CLIENT,
        otags.PEER_SERVICE: "redis_unknown_0",
    }
    if len(args) >= 2:
        tags[ttags.REDIS_KEY] = encode(args[1])
    pool = getattr(instance, "connection_pool", None)
    connection_kwargs = None
    if pool:
        connection_kwargs = getattr(pool, "connection_kwargs", None)
        if connection_kwargs and "host" in connection_kwargs and "port" in connection_kwargs:
            tags[ttags.SERVER_ADDR] = str("%s:%s" % (connection_kwargs["host"], connection_kwargs["port"]))
    tags[otags.PEER_SERVICE] = get_redis_service(connection_kwargs)
    with opentracing.tracer.start_span(cmd, get_current_span(), tags):
        return wrapped(*args, **kwargs)


def _wrapper_pipeline_execute(wrapped, instance, args, kwargs):
    tags = {
        otags.SPAN_KIND: otags.SPAN_KIND_RPC_CLIENT,
        otags.PEER_SERVICE: "redis_unknown_0",
    }

    pool = getattr(instance, "connection_pool", None)
    connection_kwargs = None
    if pool:
        connection_kwargs = getattr(pool, "connection_kwargs", None)
        if connection_kwargs and "host" in connection_kwargs and \
                "port" in connection_kwargs:
            tags[ttags.SERVER_ADDR] = "{host}:{port}".format(
                **connection_kwargs)
    tags[otags.PEER_SERVICE] = get_redis_service(connection_kwargs)
    with opentracing.tracer.start_span("pipeline", get_current_span(), tags):
        return wrapped(*args, **kwargs)


def get_redis_service(connection_kwargs):
    default = "redis_unknown_0"
    if connection_kwargs and "host" in connection_kwargs and "port" in connection_kwargs:
        srv = "redis_%s_%s" % (connection_kwargs["host"], connection_kwargs["port"])
        srv = srv.replace(".", "-")
        default = srv
    return default


def _wrapper_make_connection(wrapped, instance, args, kwargs):
    tags = {
        otags.SPAN_KIND: otags.SPAN_KIND_RPC_CLIENT,
    }
    connection_kwargs = getattr(instance, "connection_kwargs", None)
    tags[otags.PEER_SERVICE] = get_redis_service(connection_kwargs)
    with opentracing.tracer.start_span("connect", get_current_span(), tags):
        return wrapped(*args, **kwargs)


def instrument_redis_client(module):
    wrap_function_wrapper(module, 'StrictRedis.execute_command',
                          _wrapper_execute_command)
    wrap_function_wrapper(module, 'BasePipeline.execute',
                          _wrapper_pipeline_execute)


def instrument_redis_connection(module):
    wrap_function_wrapper(module, 'ConnectionPool.make_connection',
                          _wrapper_make_connection)
