#!/usr/bin/env python
# coding: utf-8
"""
https://www.python.org/dev/peps/pep-0249/
"""

import opentracing
from opentracing.ext import tags as otags
from wrapt import ObjectProxy

from tracing import tags as ttags
from tracing.request_context import get_current_span
from .utils.object_wrapper import wrap_object

max_len = 200


def _instance_name(args, kwargs):
    def _arguments(host=None, user=None, passwd=None, db=None, port=None, *args, **kwargs):
        return host, port

    host, port = _arguments(*args, **kwargs)

    return host or '127.0.0.1', port or '3306'

DEFAULT = object()


def get_method_name(sql):
    sql = str(sql).strip()
    if len(sql) < 6 or sql[:6].lower() not in CursorWrapper.db_operations:
        method = "others"
    else:
        method = sql[:6].lower()
    return method


def get_db_tags(sql, instance_name):
    if isinstance(sql, unicode):
        sql = sql.encode("utf-8")
    svc = "sql_%s_%s" % (instance_name[0], instance_name[1])
    svc = svc.replace(".", "-")
    tags = {
        otags.SPAN_KIND: otags.SPAN_KIND_RPC_CLIENT,
        otags.PEER_SERVICE: svc,
        ttags.SERVER_ADDR: "%s:%s" % instance_name,
        ttags.MYSQL_PREPARE: sql[:max_len],
    }
    return tags


class CursorWrapper(ObjectProxy):
    db_operations = ["insert", "update", "select", "delete"]

    def __init__(self, cursor, instance_name):
        super(CursorWrapper, self).__init__(cursor)
        self._tc_instance_name = instance_name
        self._tc_in_span = None

    def execute(self, sql, *args, **kwargs):
        if self._tc_in_span:
            # already in a client span, need not patch
            return self.__wrapped__.execute(sql, *args, **kwargs)
        method_name = get_method_name(sql)
        tags = get_db_tags(sql, self._tc_instance_name)
        with opentracing.tracer.start_span(method_name, get_current_span(), tags) as span:
            self._tc_in_span = span
            try:
                return self.__wrapped__.execute(sql, *args, **kwargs)
            finally:
                self._tc_in_span = None

    def executemany(self, sql, seq_of_parameters):
        method_name = get_method_name(sql)
        tags = get_db_tags(sql, self._tc_instance_name)
        with opentracing.tracer.start_span(method_name, get_current_span(), tags) as span:
            self._tc_in_span = span
            try:
                return self.__wrapped__.executemany(sql, seq_of_parameters)
            finally:
                self._tc_in_span = None


class ConnectionWrapper(ObjectProxy):
    __cursor_wrapper__ = CursorWrapper

    def __init__(self, connection, instance_name):
        super(ConnectionWrapper, self).__init__(connection)
        self._tc_instance_name = instance_name

    def cursor(self, *args, **kwargs):
        return self.__cursor_wrapper__(
            self.__wrapped__.cursor(*args, **kwargs), self._tc_instance_name)


class ConnectionFactory(ObjectProxy):
    __connection_wrapper__ = ConnectionWrapper

    def __init__(self, connect):
        super(ConnectionFactory, self).__init__(connect)

    def __call__(self, *args, **kwargs):
        instance_name = _instance_name(args, kwargs)
        svc = "sql_%s_%s" % (instance_name[0], instance_name[1])
        svc = svc.replace(".", "-")
        tags = {
            otags.SPAN_KIND: otags.SPAN_KIND_RPC_CLIENT,
            otags.PEER_SERVICE: svc,
            ttags.SERVER_ADDR: "%s:%s" % instance_name,
        }
        with opentracing.tracer.start_span("connect", get_current_span(), tags):
            connection = self.__wrapped__(*args, **kwargs)
        return self.__connection_wrapper__(connection, instance_name)


def instrument_dbapi2(module):
    if hasattr(module, 'connect'):
        wrap_object(module, 'connect', ConnectionFactory)
    else:
        wrap_object(module, 'Connect', ConnectionFactory)
