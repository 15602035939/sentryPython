#!/usr/bin/env python
# -*- coding: utf-8 -*-

from wrapt.wrappers import wrap_function_wrapper

import opentracing
from opentracing.ext import tags as otags

from tracing.request_context import get_current_span, RequestContextManager


def _parse_args(proto_name, method_name, *args, **kwargs):
    return proto_name, method_name


def instrument_zone_client(module):
    from zone import exc

    def _wrapper_get_headers(wrapped, instance, args, kwargs):
        span = get_current_span()
        old_headers = wrapped(*args, **kwargs)
        if not span:
            return old_headers
        headers = old_headers.copy()
        opentracing.tracer.inject(
            span=span,
            format=opentracing.Format.TEXT_MAP,
            carrier=headers,
        )
        return headers

    def _wrapper_call(wrapped, instance, args, kwargs):
        if instance.target_name is None:
            return wrapped(*args, **kwargs)
        proto_name, method_name = _parse_args(*args, **kwargs)

        service_name = instance.target_name
        method = "%s_%s" % (proto_name, method_name)

        parent_span = get_current_span()
        exception = None
        ret = None
        tags = {
            otags.SPAN_KIND: otags.SPAN_KIND_RPC_CLIENT,
            otags.PEER_SERVICE: service_name,
        }
        with opentracing.tracer.start_span(method, parent_span, tags) as span:
            with RequestContextManager(span):
                span.is_rpc = True
                try:
                    ret = wrapped(*args, **kwargs)
                except exc.ZoneCustomException as e:
                    exception = e
        if exception:
            raise
        return ret

    wrap_function_wrapper(module, "Client.call", _wrapper_call)
    wrap_function_wrapper(module, "Client.get_headers", _wrapper_get_headers)
