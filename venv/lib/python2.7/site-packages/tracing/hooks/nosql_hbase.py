#!/usr/bin/env python
# coding: utf-8

from wrapt import FunctionWrapper
import opentracing
from opentracing.ext import tags as otags

from tracing import tags as ttags
from tracing.request_context import get_current_span

from tracing.hooks.utils.object_wrapper import wrap_object
import logging

collection_methods = (
    "cells", "counter_dec", "counter_get", "counter_set", "counter_inc", "families", "put", "regions",
    "row", "rows", "scan", "send", "connection", "compact_table", "create_table",
    "delete_table", "disable_table", "enable_table", "table", "tables"
)
_logger = logging.getLogger(__name__)


def hbase_wrapper(wrapped, operation):
    def _wrapper_hbase_collection_methods(wrapped, instance, args, kwargs):
        try:
            tags = {
                otags.SPAN_KIND: otags.SPAN_KIND_RPC_CLIENT,
                otags.PEER_SERVICE: "hbase",
                ttags.HBASE_COLLECTION: str(instance.name),
            }
            with opentracing.tracer.start_span(operation, get_current_span(), tags):
                return wrapped(*args, **kwargs)
        finally:
            pass
    return FunctionWrapper(wrapped, _wrapper_hbase_collection_methods)


def instrument_hbase_connection(module):
    table = getattr(module, 'Table', None)
    if table is None:
        _logger.exception("error get module of happybase.")
        return
    for name in collection_methods:
        if hasattr(table, name):
            wrap_object(table, name, hbase_wrapper, (name,))
