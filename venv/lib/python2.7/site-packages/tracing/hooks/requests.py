#!/usr/bin/env python
# coding: utf-8

from wrapt.wrappers import wrap_function_wrapper

from six.moves.urllib.parse import urlparse
import opentracing
from opentracing.ext import tags as otags

from tracing import tags as ttags
from tracing.util import parse_server_info
from tracing.constants import HTTP_HEADER_SERVER_INFO
from tracing.request_context import get_current_span


def _wrapper_requests_sessions(wrapped, instance, args, kwargs):
    def _arguments(request, *args, **kwargs):
        return request
    request = _arguments(*args, **kwargs)
    tags = {
        otags.SPAN_KIND: otags.SPAN_KIND_RPC_CLIENT,
        ttags.HTTP_URI: request.url,
        otags.PEER_SERVICE: "http",
    }
    parsed_url = urlparse(request.url)
    method = ("%s_%s" % (parsed_url.netloc, request.method)).lower().replace(":", "_").replace(".", "_")
    with opentracing.tracer.start_span(method, get_current_span(), tags) as span:
        ret = wrapped(*args, **kwargs)
        span.set_tag(ttags.HTTP_STATUS_CODE, ret.status_code)
        if HTTP_HEADER_SERVER_INFO in ret.headers:
            app, unit, version = parse_server_info(
                ret.headers[HTTP_HEADER_SERVER_INFO])
            span.set_tag(otags.PEER_SERVICE, unit)
            span.set_tag(ttags.PEER_VERSION, version)
        return ret


def instrument_requests_sessions(module):
    wrap_function_wrapper(module, 'Session.send', _wrapper_requests_sessions)

