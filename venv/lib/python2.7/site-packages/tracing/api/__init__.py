#!/usr/bin/env python
# coding: utf-8

import wrapt

"""Get current active span."""
from tracing.request_context import get_current_span

"""Set span as current span"""
from tracing.request_context import RequestContextManager

from opentracing.ext import tags as otags
from tracing.api import get_current_span
from tracing.api import RequestContextManager
import opentracing
from tracing.statsd import Statsd


@wrapt.decorator
def local_span(wrapped, instance, args, kwargs):
    """Starts a local span.

    Can be used as decorator and context manager.
    """
    print(wrapt, instance, args)


def server_span(name=None):
    """Generate a Decorator to decorate an interface handling method to trace it.

    :param name string or function. The name of the span, may be interface name. If it is a function, will pass
    `args` and `kwargs` of the decorated function, the function should return a name. If it is None, will use
    decorated function's name. The name should not include '.' in it, if it has, '.' will be replace by '_'.
    """
    tags = {
        otags.SPAN_KIND: otags.SPAN_KIND_RPC_SERVER
    }

    @wrapt.decorator
    def wrapper(wrapped, instance, args, kwargs):
        if name is None:
            span_name = wrapped.__name__
        elif hasattr(name, '__call__'):
            span_name = name(*args, **kwargs)
        else:
            span_name = name
        span_name = span_name.replace('.', '_')
        with opentracing.tracer.start_span(span_name, get_current_span(), tags) as span:
            with RequestContextManager(span):
                return wrapped(*args, **kwargs)
    return wrapper


if __name__ == "__main__":
    @server_span(lambda x: x)
    def f(a):
        print("hehe")

    import tracing.config
    tracing.config.initialize(kafka_hosts="trace01.aws.dev:9092")
    f("h")
