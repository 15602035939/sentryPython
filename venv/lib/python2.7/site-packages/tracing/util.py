#!/usr/bin/env python
# coding: utf-8

import time
import random
import json
import warnings
import functools
import struct
import socket
import re
import ctypes


def time_in_microseconds():
    return micro_time(time.time())


def micro_time(seconds):
    """The precision must be micro.

    Example::

        In [3]: 1463589511.268947 *1000* 1000
        Out[3]: 1463589511268946.8

        In [4]: 1463589511.268946 * 1000 * 1000
        Out[4]: 1463589511268946.0

    46 must be before 47, so we use `round` instead of `math.trunc`
    """
    return round(seconds * 1000 * 1000)


def ip2int(ip):
    return struct.unpack("!i", socket.inet_aton(ip))[0]


def rand64bit():
    return random.getrandbits(64)


def rand128bit():
    return random.getrandbits(128)


def to_signed(value):
    return ctypes.c_longlong(value).value


class Singleton(type):
    _instances = {}

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


def deprecated(func):
    warnings.simplefilter('once', DeprecationWarning)

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        warnings.warn('Call to deprecated function %s.' % func.__name__,
                      category=DeprecationWarning,
                      stacklevel=2)
        return func(*args, **kwargs)
    return wrapper


def lazy_property(fn):
    """Decorator that makes a property lazy-evaluated."""
    attr_name = '_lazy_' + fn.__name__

    @property
    def _lazy_property(self):
        if not hasattr(self, attr_name):
            setattr(self, attr_name, fn(self))
        return getattr(self, attr_name)
    return _lazy_property


def encode(msg):
    """Encode message so that it can be stored in zipkin annotation.
    """
    return json.dumps(msg)


SERVER_INFO_RE = re.compile(
    r'^(?P<app>.+?)\.(?P<unit>.+?)\.(?P<name>.+?)'
    r'(?::(?P<version>(?<=:).+?))?(?# version may not exist)---')


def parse_server_info(server):
    try:
        app, unit, name, version = SERVER_INFO_RE.match(server).groups()
    except (AttributeError, TypeError):
        return "unknown", "unknown", "unknown"

    return app, unit, version or "unknown"
