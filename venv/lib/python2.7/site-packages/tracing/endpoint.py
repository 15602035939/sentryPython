#!/usr/bin/env python
# coding: utf-8

from collections import namedtuple
import os
import socket
import struct
import re
import logging


_Endpoint = namedtuple('_Endpoint', ['host', 'port'])


def ip_to_int(ip):
    return struct.unpack("!l", socket.inet_aton(ip))[0]


def split_host_and_port(netloc):
    """Returns ``(host, port)`` tuple from ``netloc``.

    Returned ``port`` will be ``None`` if not present.

    """
    match = re.match(r'^(.+):(\d+)$', netloc)
    if match:
        host = match.group(1)
        port = int(match.group(2))
    else:
        host = netloc
        port = None
    return host, port


_dns_cache = {}


def resolve(name):
    if name in _dns_cache:
        return _dns_cache[name]
    try:
        family, _, _, _, addr = socket.getaddrinfo(name, 80, socket.AF_INET, socket.SOCK_DGRAM)[0]
        _dns_cache[name] = ip_to_int(addr[0])
    except socket.gaierror as e:
        logging.error('unable to resolve %s: %s', name, e)
        _dns_cache[name] = None
    return _dns_cache[name]


class Endpoint(_Endpoint):
    _local_ip_cache = None

    @staticmethod
    def local_ip():
        """Return local ip in `int`."""
        if Endpoint._local_ip_cache:
            return Endpoint._local_ip_cache

        # get local ip when connecting outside
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # it need not connect at all
        s.connect(("8.8.8.8", 53))
        ip = s.getsockname()[0]
        Endpoint._local_ip_cache = ip_to_int(ip)
        return Endpoint._local_ip_cache

    @staticmethod
    def container_group():
        return os.environ.get("CADVISOR_GROUP")

