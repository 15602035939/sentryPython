Metadata-Version: 2.1
Name: diplomat
Version: 1.3.0
Summary: Service registry and discovery client
Home-page: http://git.in.zhihu.com/infrastructure/diplomat
Author: Young King
Author-email: dev@zhihu.com
License: Private
Keywords: diplomat
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Private License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Requires-Dist: python-consul (>=0.4.7)
Requires-Dist: tlcache (>=0.2.0)
Requires-Dist: requests (>=2.9.0)

===============================
diplomat
===============================
Service registry and auto-discovery client

* Documentation: http://ep.zhihu.io/diplomat .

How it Works
==================
关于服务通常会有来自两方面的问题:

- 服务注册:

  服务需要去发布它自身的状态。通常包括它的主机IP 地址及端口号，有时也包括服务认证信息，
  使用协议，版本号等等

- 服务发现:

  服务需获知自己所关注的服务的状态


注册
-----------------
部署系统会自动帮你注册， 无需关注.

如果要手动注册， 可以这样:

::

   curl -d '{
   "ID": "redis1",
   "Name": "redis",
   "Tags": [
     "master",
     "v1"
   ],
   "Port": 8000,
   "Check": {
     "HTTP": "http://localhost:5000/health",
     "Interval": "10s",
   }
   }'  -X PUT  http://localhost:8500/v1/agent/service/register

其中 Check 可以有 `Script`, `HTTP`, `TCP` 三种，用法见 `Check Definition <https://www.consul.io/docs/agent/checks.html>`_ .



Tag规则
~~~~~~~~~~~~~
目前我们服务统一约定，有以下 Tag 定义规则。

-  服务类型，http 服务需要加上 http, snow 和 wish 的服务 加上 snow 和 wish 的tag.


发现
---------------
发现提供二种方式，DNS 发现、客户端发现。

DNS发现
~~~~~~~~~~~~~
TODO

客户端发现
~~~~~~~~~~~~~~
使用本客户端以及相应开发语言编写的客户端提供的发现API。


Usage
==============

实例化
---------

>>> from diplomat import discover
>>> diplomat = discover()

本地没有安装 consul 的情况下，可以配置环境变量来使用远程的 consul::

    export SERVICE_DISCOVERY_URI=consul://consului.aws.dev:8500

注册
---------

>>>  diplomat.agent.service.register('redis',
                     port=6379,
                     tags=['master', 'release'],
                     ttl='10s')
... True

发现
---------

>>> diplomat.find('redis')
... [{'node': 'redis01', 'address':u'10.13.39.143', 'id':'redis', 'service':'redis', 'port':6379, 'tags': ['tcp', 'release'], 'checks': []}, {'node': 'redis02', 'address':u'10.13.39.144', 'port':6379, 'tags':['tcp', 'release']}]

根据 tag 发现

>>> diplomat.find('redis', tag='zone,release')

负载均衡策略
--------------
默认策略为 ``random`` ,目前提供 ``roundrobin`` 和 ``random`` 两种策略.

>>> diplomat.select('redis', strategy="random")
... {'host': 'redis01', 'address':10.13.39.143', 'port':6379, 'tags': ['tcp', 'release']

缓存策略
--------------
diplomat 内建两级缓存， 一层内存 cache 默认 30s失效，二层为文件 cache 。其中二层文件 cache
只作为容灾策略，当请求 consul 失败时读取它，缓存时间为1天。

强制刷新缓存

>>> diplomat.select('redis', refresh=True)
>>> diplomat.find('redis', refresh=True)

覆盖发现地址
------------
在本地开发联调时，可以使用环境变量覆盖发现地址。 环境变量的格式为: `<大写的服务名>_SERVICE_ADDRESS

>>> os.environ['GOOGLE_SERVICE_ADDRESS'] = '127.0.0.1:8080'
>>> diplomat.select('google')
... {'address': '127.0.0.1', 'port': 8080}




History
-------
1.3.0 (2017-03-23)
++++++++++++++++++
* 允许指定读取对一致性模型参数，默认为stale模式


1.2.0 (2016-11-08)
++++++++++++++++++
* 允许通过环境变量覆盖服务发现地址

1.1.0 (2016-08-08)
++++++++++++++++++
* tlcache 升级到 0.2.0, 发现空结果也会返回，异常时使用旧数据

1.0.5 (2016-06-07)
++++++++++++++++++
* 使用 requests 内建的重试机制

1.0.4 (2016-04-14)
+++++++++++++++++++
* 使用新的支持刷新缓存版本的tlcache, 重新支持缓存更新

1.0.3 (2016-03-16)
+++++++++++++++++++
* Add default timeout

1.0.2 (2015-11-24)
++++++++++++++++++

* Limit tlcache >= 1.0.3

* Update documents

1.0.1 (2015-11-16)
+++++++++++++++++++
*  限制 tlcache 的版本

1.0.0 (2015-11-10)
++++++++++++++++++
* 取缔实时更新的机制，因为 consul的实时机制是监听整个服务目录，不能只监听单个服务
  所以单个服务变更的时候，所有服务都会得到实时通知，当监听的客户端比较多时会照成
  雪崩

* 取消 tornado 和 gevent 的 driver, 因为取缔实时更新的缘故，不再需特殊处理，统一
  用一种即可

* 使用 `TLCache <https://github.com/youngking/tlcache>`_ 来做二级缓存。当前在
  内存中缓存 30s，文件系统中缓存 1 天。

* 重新实现的 roundrobin 策略，更简单有效

0.3.7 (2015-10-30)
++++++++++++++++++
* capture the ValuError in watchdog
* add sleep when tornado driver fetch failed

0.3.6 (2015-10-27)
++++++++++++++++++
* fix when tornado driver fetch timeout

0.3.5 (2015-10-26)
++++++++++++++++++
* Limit python-consul >=0.4.7
0.3.4 (2015-10-26)
++++++++++++++++++
* fix tornado driver 不更新缓存的问题

0.3.3 (2015-08-25)
+++++++++++++++++++
* 当 consul 不可用时使用缓存 (for std&&gevent)

0.3.2
+++++++++++++++++++

* limit python-consul version

0.3.1 (2015-08-02)
+++++++++++++++++++
* find, select 方法 返回地址以外的更多服务信息，同时支持 passing, dc, tag 等参数
* std driver 使用新的 refresh 方法进行链式调用来更新缓存，原 refresh 参数不再鼓励使用。
* fix 自0.2.0版本以来未正确使用 consul 的健康检查的问题

0.3.0 (2015-07-03)
+++++++++++++++++++
* std driver 支持 select 方法，因为std driver 不支持自动失效缓存，故设定为 30秒自动失效。
  失效时长可以在初始化时指定。并且可以通过 设置 ``refresh`` 参数为 **True** 来强制更新缓存

* 使用 testscenarios 重构测试

0.2.0 (2015-06-05)
+++++++++++++++++++
* 使用 `python-consul <https://github.com/cablehead/python-consul>`_ 作为底层 driver.

0.1.0 (2015-06-03)
++++++++++++++++++

* 支持容器环境内的服务发现

0.0.3 (2014-12-10)
++++++++++++++++++

* 修正负载均衡的错误代码.

0.0.2 (2014-10-22)
++++++++++++++++++

* 增加了 roundrobin 负载均衡策略.

0.0.1 (2014-10-15)
++++++++++++++++++

* First release on PyPI.


