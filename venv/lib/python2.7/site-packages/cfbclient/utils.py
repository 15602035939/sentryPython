#!/usr/bin/env python
# encoding: utf-8


class DotDict(dict):
    """Makes a dictionary access through dot like an object.And
    support chain dot access like `a.b.c.d` .
    """

    def __init__(self, value=None):
        if value is None:
            pass
        elif isinstance(value, dict):
            for key in value:
                self.__setitem__(key, value[key])
        else:
            raise TypeError("expected dict")

    def __setitem__(self, key, value):
        if isinstance(value, dict) and not isinstance(value, DotDict):
            value = DotDict(value)
        dict.__setitem__(self, key, value)

    def __getattr__(self, key):
        if key.startswith("__"):
            return dict.__getattr__(self, key)
        if '.' in key:
            prefix, rest = key.split(".", 1)
            target = dict.__getitem__(self, prefix)
            if not isinstance(target, DotDict):
                raise KeyError("can't get %s in %s (%s)" % (rest, prefix, repr(target)))
            return target
        else:
            return self.__getitem__(key)

    __setattr__ = __setitem__


if __name__ == '__main__':
    girl = DotDict({'eye': {'color': 'blue', 'size': 'N'},
                    'bra': {'size': 'F'},
                    'la.la': {'who': 'you'}
                    })
    print girl.bra.size
    print girl.eye
    print girl.eye.color
    print girl['eye']
    print girl['la.la']
    print girl['la.la'].who
