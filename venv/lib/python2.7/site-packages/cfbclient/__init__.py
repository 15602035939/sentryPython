#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Client of Config Bao
"""
import logging
import json
import os
import random
import threading

import requests
from diplomat import discover
from pstatsd import Statsd
from requests.exceptions import ConnectionError
from tlcache import TLCache

from .exceptions import NotFound, ServerError
from .doc import __version__
from .utils import DotDict

RETRY = 3

logger = logging.getLogger("cfbclient")
cache = TLCache("/tmp/cfbclient{0}".format(__version__))


class ConfigFinder(object):
    def get(self, name):
        raise NotImplementedError()

    def __call__(self, name):
        return self.get(name)

    def __getattr__(self, name):
        return self.get(name)

    def __getitem__(self, name):
        return self.get(name)


class LocalConfigFinder(ConfigFinder):
    def __init__(self, config_file=None):
        self.config_file = config_file
        self.config = None

    def initialize(self):
        if not os.path.exists(self.config_file):
            raise RuntimeError(
                "Local config file %s not exists." % self.config_file)
        with open(self.config_file) as f:
            try:
                self.config = json.loads(f.read())
            except ValueError:
                raise RuntimeError(
                    "Local config file %s is not valided." % self.config_file)

    def get(self, name, version=None):
        if self.config is None:
            self.initialize()
        return DotDict(self.config.get(name, {}))


class ServerConfigFinder(ConfigFinder):

    def __init__(self, discovery_uri=None, timeout=1):
        self.discovery_uri = discovery_uri
        self.timeout = timeout
        self.servers = None
        self.lock = threading.Lock()

        # initialize requests
        self.session = requests.session()
        adapter = requests.adapters.HTTPAdapter(max_retries=RETRY)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)

    def initialize(self):
        diplomat = discover(driver="std", uri=self.discovery_uri)
        try:
            self.servers = diplomat.find('cfbservice')
        except ConnectionError:
            raise RuntimeError(
                "Can't connect to consul!!!. Make sure consul is started")

    def get(self, name, version=None):
        """
        获取服务的配置
        """
        with Statsd.time('cfbclient.%s.request_time' % name):
            with self.lock:
                if not self.servers:
                    self.initialize()
                if '/' in name:
                    service, profile = name.split('/', 1)
                else:
                    service = name
                    profile = 'default'
                if os.getenv('CFB_VERSION') == 'V1':
                    return self.v1_get(service, profile)
                else:
                    return self.v2_get(service, profile, version)

    @cache.cache(timeout=30)
    def v1_get(self, service, profile):
        server = random.choice(self.servers)
        url = "http://{0}:{1}".format(server["address"], server["port"])
        payload = {"service": service, "profile": profile, "via": os.environ.get("ZAE_UNIT_NAME", "")}
        r = self.session.post(url, json=payload, timeout=self.timeout)
        if r.status_code == 404:
            Statsd.incr('cfbclient.%s.failed.404' % service)
            raise NotFound
        elif r.status_code != 200:
            Statsd.incr('cfbclient.%s.failed.%s' % (service, r.status_code))
            raise ServerError(r.text)
        else:
            return DotDict(r.json())

    @cache.cache(timeout=30)
    def v2_get(self, service, profile, version=None):
        server = random.choice(self.servers)
        url = "http://{0}:{1}/v2/configs/{2}/{3}".format(server["address"], server["port"], service, profile)
        headers = {
            'Zae-App-Name': os.getenv('ZAE_APP_NAME'),
            'Zae-Unit-Name': os.getenv('ZAE_UNIT_NAME', ''),
            'Zae-Env': os.getenv('ZAE_ENV', '')
        }
        params = {
            'appver': version or os.getenv('ZHIHU_APP_VERSION')
        }
        r = self.session.get(url, headers=headers, params=params)
        if r.status_code == 404:
            Statsd.incr('cfbclientv2.%s.failed.404' % service)
            raise NotFound
        elif r.status_code != 200:
            Statsd.incr('cfbclientv2.%s.failed.%s' % (service, r.status_code))
            raise ServerError
        else:
            return DotDict(r.json())


def initialize_config_finder():
    """Initialize config finder by local env"""
    if os.getenv('CFB_LOCAL'):
        return LocalConfigFinder(os.getenv('CFB_LOCAL'))
    else:
        return ServerConfigFinder()


# 全局配置对象
config = initialize_config_finder()


def connect(name, version=None):
    # 得到某个应用下的配置
    return config.get(name, version)
