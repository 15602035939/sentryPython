#!/usr/bin/env python
# encoding: utf-8
from thrift.TMultiplexedProcessor import TMultiplexedProcessor
from thrift.protocol.TBinaryProtocol import TBinaryProtocolAccelerated, TBinaryProtocol
from thrift.protocol.TMultiplexedProtocol import TMultiplexedProtocol
from thrift.transport.TTransport import TMemoryBuffer


class _ClientProxy(object):
    def __init__(self, client, processor):
        self.client = client
        self.processor = processor

    def __getattr__(self, method):
        if not method.startswith(("send_", "recv_")):
            def wrapper(*args, **kwargs):
                getattr(self.client, "send_" + method)(*args, **kwargs)
                self.client._oprot.trans.cstringio_buf.seek(0)
                self.processor.process(self.client._oprot.protocol, self.client._iprot)
                self.client._iprot.trans.cstringio_buf.seek(0)
                return getattr(self.client, "recv_" + method)()
            return wrapper
        else:
            return method


class TestClient(object):

    def __init__(self, service_map):
        self.processor = TMultiplexedProcessor()
        self.services = {}
        for service, controller in service_map:
            service_name = service.__name__.split('.')[-1]
            _processor = service.Processor(controller())
            self.services[service_name] = service
            self.processor.registerProcessor(service_name, _processor)

    def get_client(self, service_name):
        # output protocol
        trans = TMemoryBuffer()
        protocol = TBinaryProtocolAccelerated(trans)
        oprot = TMultiplexedProtocol(protocol, service_name)

        # input protocol
        trans = TMemoryBuffer()
        iprot = TBinaryProtocol(trans)

        service = self.services[service_name]
        client = _ClientProxy(service.Client(iprot, oprot), self.processor)
        return client

    def __getattr__(self, service_name):
        return self.get_client(service_name)
